// Copyright (c) 2019, The Decred developers
// See LICENSE for details.

package main

import (
	"crypto/elliptic"
	"crypto/tls"
	"io/ioutil"
	"os"
	"path/filepath"
	"time"

	"github.com/decred/dcrd/certgen"
	credentials "google.golang.org/grpc/credentials"
)

// openRPCKeyPair creates or loads the RPC TLS keypair specified by the
// application config.
func openRPCKeyPair(certPath, keyPath string) (credentials.TransportCredentials, error) {
	// Generate a new keypair when the key is missing.
	_, e := os.Stat(keyPath)
	keyExists := !os.IsNotExist(e)
	if !keyExists {
		cert, err := generateRPCKeyPair(certPath, keyPath, certWriter{})
		if err != nil {
			return nil, err
		}
		return credentials.NewServerTLSFromCert(&cert), nil
	}

	cert, err := tls.LoadX509KeyPair(certPath, keyPath)
	if err != nil {
		return nil, err
	}
	return credentials.NewServerTLSFromCert(&cert), nil
}

// CertWriter is an interface that wraps either ioutil.WriteFile or a stub for
// testing.
type CertWriter interface {
	WriteCertificate(string, []byte) error
}

type certWriter struct{}

func (w certWriter) WriteCertificate(certPath string, cert []byte) error {
	return ioutil.WriteFile(certPath, cert, 0600)
}

// generateRPCKeyPair generates a new RPC TLS keypair and writes the cert and
// possibly also the key in PEM format to the paths specified by the config.  If
// successful, the new keypair is returned.
// Respectfully pilfered from
// github.com/decred/dcrstakepool/blob/master/backend/stakepoold/grpcserver.go
func generateRPCKeyPair(certPath, keyPath string, writer CertWriter) (tls.Certificate, error) {
	log.Info("Generating TLS certificates...")

	// Create directories for cert and key files if they do not yet exist.
	certDir, _ := filepath.Split(certPath)
	keyDir, _ := filepath.Split(keyPath)
	err := os.MkdirAll(certDir, 0700)
	if err != nil {
		return tls.Certificate{}, err
	}
	err = os.MkdirAll(keyDir, 0700)
	if err != nil {
		return tls.Certificate{}, err
	}

	// Generate cert pair.
	org := "dcrdata autogenerated cert"
	validUntil := time.Now().Add(time.Hour * 24 * 365 * 10)
	cert, key, err := certgen.NewTLSCertPair(elliptic.P521(), org,
		validUntil, nil)
	if err != nil {
		return tls.Certificate{}, err
	}
	keyPair, err := tls.X509KeyPair(cert, key)
	if err != nil {
		return tls.Certificate{}, err
	}

	// Write cert and (potentially) the key files.
	err = writer.WriteCertificate(certPath, cert)
	if err != nil {
		return tls.Certificate{}, err
	}
	err = writer.WriteCertificate(keyPath, key)
	if err != nil {
		rmErr := os.Remove(certPath)
		if rmErr != nil {
			log.Warnf("Cannot remove written certificates: %v",
				rmErr)
		}
		return tls.Certificate{}, err
	}

	log.Info("Done generating TLS certificates")
	return keyPair, nil
}
